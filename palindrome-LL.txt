class Solution {
public:
    ListNode* reverseList(ListNode* head) {
       ListNode* newHead = NULL;

       while (head != NULL) {
           ListNode* nextPtr = head->next;
           head->next = newHead;
           newHead = head;
           head = nextPtr;
        } 

        return newHead;
    }
    
    bool isPalindrome(ListNode* head) {
        if (!head || !head->next) {
            return true; // An empty list or a single-node list is considered a palindrome
        }

        ListNode* slow = head;
        ListNode* fast = head;

        // Move slow to the middle and fast to the end of the list
        while (fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }

        // Reverse the second half of the list
        ListNode* reversedHalf = reverseList(slow);

        // Compare the first half and the reversed second half
        while (reversedHalf) {
            if (head->val != reversedHalf->val) {
                return false;
            }
            head = head->next;
            reversedHalf = reversedHalf->next;
        }

        return true;
    }
};

// class Solution{
//     public:
//      bool isPalindrome(ListNode* head){
//         ListNode* temp = head;
//         vector<int> v;
//         while(temp != NULL){
//             v.push_back(temp->val);
//             temp = temp->next;
//         }

//         reverse(v.begin(), v.end());
//         temp = head;
//         for(int i = 0; i < v.size(); i++){
//             if(temp->val != v[i]){
//                 return false;
//             }
//             temp = temp->next;
//         }

//         return true;

//     }
// };