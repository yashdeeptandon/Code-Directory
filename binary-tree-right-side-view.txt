class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        queue<TreeNode*> q;
        vector<int> level;
        if(root == NULL) return ans;
        q.push(root);
        q.push(NULL);

        while(!q.empty()){
            TreeNode *temp = q.front();
            q.pop();
            if(temp == NULL){ // level change
                ans.push_back(level);
                level.clear();
                if(!q.empty()){ //elements still present
                    q.push(NULL);
                }
            }else
            {
                level.push_back(temp->val);
                if(temp->left){
                    q.push(temp->left);
                }
                if(temp->right){
                    q.push(temp->right);
                }
            }

        }

        return ans;
    }

    vector<int> rightSideView(TreeNode* root) {
        vector<vector<int>> level;
        vector<int> ans;
        if(root == NULL){
            return ans;
        }  

        level = levelOrder(root);
        for(auto x : level){
            ans.push_back(x[x.size() - 1]);
        }
        return ans;
    }
};