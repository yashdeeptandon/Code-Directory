vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int m = matrix.size();  //colmn
        int n = matrix[0].size();   //rows
        vector<int> ans;
        //right->bottom->left->top

        int right = n - 1;
        int top = 0;
        int bottom = m - 1;
        int left = 0;

        while(top <= bottom && left <= right){

        //step 1: top will remain const and for(left->right)
        for(int i = left; i <= right; i++){
            ans.push_back(matrix[top][i]);
        }
        top++;

        //step 2: right is const and for(top->bottom)
        for(int i = top; i <= bottom; i++){
            ans.push_back(matrix[i][right]);
        }
        right--;

        if(top <= bottom){  //because top has changed
            //step 3: bottom is const and for(right->left)
            for(int i = right; i >= left; i--){
            ans.push_back(matrix[bottom][i]);
            }
            bottom--;
        }
        

        if(left <= right){  //because right has changed
            //step 4: left is const and for(bottom->top)
            for(int i = bottom; i >= top; i--){
            ans.push_back(matrix[i][left]);
            }
            left++;
        }
        
        }

        return ans;
        
    }