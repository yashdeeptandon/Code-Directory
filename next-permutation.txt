Brute Force 
1-> Generate all possible permutation using recursion that will take a TC of O(N!) 
2-> Linear Search 
3-> Next Index TC -> O(N! * N)

Better
using STL in C++
next_permutation(nums.begin(), nums.end();

Optimal

1-> finding the breakpoint.
 	if no breakpoint found, thus have to return sorted array.
2-> finding the element from the back which is just greater than the nums[idx].
3-> reverse the array in sorted order.
reverse(nums.begin() + ind + 1, nums.end());

Code:
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        //using STL
        //next_permutation(nums.begin(), nums.end());
        int n = nums.size();
        int idx = -1;
        //step-1: finding the breakpoint
        for(int i = n - 2; i >= 0; i--){
            if(nums[i] < nums[i + 1]){
                idx = i;
                break;
            }
        }
        //no breakpoint found, thus have to return sorted array
        if(idx == -1){
            reverse(nums.begin(), nums.end());
            return;
        }

        //step-2: finding the element from the back which is just greater than the nums[idx]
        for(int i = n - 1; i > idx; i--){
            if(nums[i] > nums[idx]){
                swap(nums[i], nums[idx]);
                break;
            }
        }

        //step-3: reverse the remaining array
        reverse(nums.begin() + idx + 1, nums.end());

    }
};


