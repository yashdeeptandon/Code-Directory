bool search(vector<int> &nums, int target)
    {
        int start = 0;
        int end = nums.size() - 1;
        int mid = start + (end - start) / 2;

        while (start <= end)
        {
            if (nums[mid] == target)
            {
                return true;
            }
            // checking if the 3 pointer positions are equal as they will cause problem
            if (nums[start] == nums[mid] && nums[mid] == nums[end])
            {
                start++;
                end--;
                continue; // continue till this condition fails after triming the search space
            }
            // check if left half is sorted
            else if (nums[start] <= nums[mid])
            {
                // if sorted then check for the target as we do in binary search
                if (nums[start] <= target && nums[mid] >= target)
                {
                    end = mid - 1;
                }
                else
                { // eliminating the half
                    start = mid + 1;
                }
            }
            // check if right half is sorted
            else if (nums[end] >= nums[mid])
            {
                // if sorted then check for target as we do in binary search
                if (nums[mid] <= target && nums[end] >= target)
                {
                    start = mid + 1;
                }
                else
                { // eliminating the half
                    end = mid - 1;
                }
            }

            mid = start + (end - start) / 2;
        }

        return false;
    }